// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, ImapConnection, MailListener, MailParser, util,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require("util");

  EventEmitter = require("events").EventEmitter;

  MailParser = require("mailparser").MailParser;

  ImapConnection = require("imap").ImapConnection;

  MailListener = (function(_super) {

    __extends(MailListener, _super);

    function MailListener(options) {
      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);
      this.imap = new ImapConnection({
        username: options.username,
        password: options.password,
        host: options.host,
        port: options.port,
        secure: options.secure
      });
      this.mailbox = options.mailbox || "INBOX";
    }

    MailListener.prototype.start = function() {
      var _this = this;
      return this.imap.connect(function(err) {
        if (err) {
          util.log("error connecting to mail server " + err);
          return _this.emit("error", err);
        } else {
          util.log("successfully connected to mail server");
          _this.emit("server:connected");
          return _this.imap.openBox(_this.mailbox, false, function(err) {
            if (err) {
              util.log("error opening mail box '" + _this.mailbox + "'  " + err);
              return _this.emit("error", err);
            } else {
              util.log("successfully opened mail box '" + _this.mailbox + "'");
              return _this.imap.on("mail", function(id) {
                util.log("new mail arrived with id " + id);
                _this.emit("mail:arrived", id);
                return _this.imap.search(["UNSEEN"], function(err, searchResults) {
                  var fetch;
                  if (err) {
                    util.log("error searching unseen emails " + err);
                    return _this.emit("error", err);
                  } else {
                    util.log("found " + searchResults.length + " emails");
                    fetch = _this.imap.fetch(searchResults, {
                      markSeen: true,
                      request: {
                        headers: false,
                        body: "full"
                      }
                    });
                    return fetch.on("message", function(msg) {
                      var parser;
                      parser = new MailParser;
                      msg.on("data", function(data) {
                        return parser.write(data.toString());
                      });
                      parser.on("end", function(mail) {
                        util.log("parsed mail" + util.inspect(mail, false, 5));
                        return _this.emit("mail:parsed", mail);
                      });
                      return msg.on("end", function() {
                        util.log("fetched message: " + util.inspect(msg, false, 5));
                        return parser.end();
                      });
                    });
                  }
                });
              });
            }
          });
        }
      });
    };

    MailListener.prototype.stop = function() {
      var _this = this;
      return this.imap.logout(function() {
        return _this.emit("server:disconnected");
      });
    };

    return MailListener;

  })(EventEmitter);

  module.exports = MailListener;

}).call(this);
